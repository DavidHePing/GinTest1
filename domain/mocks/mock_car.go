// Code generated by MockGen. DO NOT EDIT.
// Source: domain\car.go

// Package mocks is a generated GoMock package.
package mocks

import (
	domain "GinTest1/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCarRepository is a mock of CarRepository interface.
type MockCarRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCarRepositoryMockRecorder
}

// MockCarRepositoryMockRecorder is the mock recorder for MockCarRepository.
type MockCarRepositoryMockRecorder struct {
	mock *MockCarRepository
}

// NewMockCarRepository creates a new mock instance.
func NewMockCarRepository(ctrl *gomock.Controller) *MockCarRepository {
	mock := &MockCarRepository{ctrl: ctrl}
	mock.recorder = &MockCarRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCarRepository) EXPECT() *MockCarRepositoryMockRecorder {
	return m.recorder
}

// CreateCar mocks base method.
func (m *MockCarRepository) CreateCar(car *domain.Car) *domain.Car {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCar", car)
	ret0, _ := ret[0].(*domain.Car)
	return ret0
}

// CreateCar indicates an expected call of CreateCar.
func (mr *MockCarRepositoryMockRecorder) CreateCar(car interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCar", reflect.TypeOf((*MockCarRepository)(nil).CreateCar), car)
}

// DeleteCar mocks base method.
func (m *MockCarRepository) DeleteCar(carId int) *domain.Car {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCar", carId)
	ret0, _ := ret[0].(*domain.Car)
	return ret0
}

// DeleteCar indicates an expected call of DeleteCar.
func (mr *MockCarRepositoryMockRecorder) DeleteCar(carId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCar", reflect.TypeOf((*MockCarRepository)(nil).DeleteCar), carId)
}

// GetAllCar mocks base method.
func (m *MockCarRepository) GetAllCar() []*domain.Car {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCar")
	ret0, _ := ret[0].([]*domain.Car)
	return ret0
}

// GetAllCar indicates an expected call of GetAllCar.
func (mr *MockCarRepositoryMockRecorder) GetAllCar() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCar", reflect.TypeOf((*MockCarRepository)(nil).GetAllCar))
}

// GetCar mocks base method.
func (m *MockCarRepository) GetCar(carId int) *domain.Car {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCar", carId)
	ret0, _ := ret[0].(*domain.Car)
	return ret0
}

// GetCar indicates an expected call of GetCar.
func (mr *MockCarRepositoryMockRecorder) GetCar(carId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCar", reflect.TypeOf((*MockCarRepository)(nil).GetCar), carId)
}

// UpdateCar mocks base method.
func (m *MockCarRepository) UpdateCar(carId int, car *domain.Car) *domain.Car {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCar", carId, car)
	ret0, _ := ret[0].(*domain.Car)
	return ret0
}

// UpdateCar indicates an expected call of UpdateCar.
func (mr *MockCarRepositoryMockRecorder) UpdateCar(carId, car interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCar", reflect.TypeOf((*MockCarRepository)(nil).UpdateCar), carId, car)
}

// MockCarUseCase is a mock of CarUseCase interface.
type MockCarUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockCarUseCaseMockRecorder
}

// MockCarUseCaseMockRecorder is the mock recorder for MockCarUseCase.
type MockCarUseCaseMockRecorder struct {
	mock *MockCarUseCase
}

// NewMockCarUseCase creates a new mock instance.
func NewMockCarUseCase(ctrl *gomock.Controller) *MockCarUseCase {
	mock := &MockCarUseCase{ctrl: ctrl}
	mock.recorder = &MockCarUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCarUseCase) EXPECT() *MockCarUseCaseMockRecorder {
	return m.recorder
}

// CreateCar mocks base method.
func (m *MockCarUseCase) CreateCar(car *domain.Car) *domain.Car {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCar", car)
	ret0, _ := ret[0].(*domain.Car)
	return ret0
}

// CreateCar indicates an expected call of CreateCar.
func (mr *MockCarUseCaseMockRecorder) CreateCar(car interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCar", reflect.TypeOf((*MockCarUseCase)(nil).CreateCar), car)
}

// DeleteCar mocks base method.
func (m *MockCarUseCase) DeleteCar(carId int) *domain.Car {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCar", carId)
	ret0, _ := ret[0].(*domain.Car)
	return ret0
}

// DeleteCar indicates an expected call of DeleteCar.
func (mr *MockCarUseCaseMockRecorder) DeleteCar(carId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCar", reflect.TypeOf((*MockCarUseCase)(nil).DeleteCar), carId)
}

// GetAllCar mocks base method.
func (m *MockCarUseCase) GetAllCar() []*domain.Car {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCar")
	ret0, _ := ret[0].([]*domain.Car)
	return ret0
}

// GetAllCar indicates an expected call of GetAllCar.
func (mr *MockCarUseCaseMockRecorder) GetAllCar() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCar", reflect.TypeOf((*MockCarUseCase)(nil).GetAllCar))
}

// GetCar mocks base method.
func (m *MockCarUseCase) GetCar(carId int) *domain.Car {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCar", carId)
	ret0, _ := ret[0].(*domain.Car)
	return ret0
}

// GetCar indicates an expected call of GetCar.
func (mr *MockCarUseCaseMockRecorder) GetCar(carId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCar", reflect.TypeOf((*MockCarUseCase)(nil).GetCar), carId)
}

// UpdateCar mocks base method.
func (m *MockCarUseCase) UpdateCar(carId int, car *domain.Car) *domain.Car {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCar", carId, car)
	ret0, _ := ret[0].(*domain.Car)
	return ret0
}

// UpdateCar indicates an expected call of UpdateCar.
func (mr *MockCarUseCaseMockRecorder) UpdateCar(carId, car interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCar", reflect.TypeOf((*MockCarUseCase)(nil).UpdateCar), carId, car)
}
